const Discord = require("discord.js");
const db = require("quick.db");
const fs = require("fs");

module.exports = {
  name: "log",
  category: "Rp",
  description: "Crée une backup de l'économie actuelle du serveur [Staff Only]",
  usage: "e/xp [@user]",
  statut: "on",
  run: async (client, message, args) => {
    const PermEmbed = new Discord.RichEmbed()
      .setColor("RED")
      .setDescription(
        "Vous n'avez pas l'autorisation de faire ça, bien tenté ! <:no:648627916317392936>"
      )
      .setAuthor(message.author.tag, message.author.displayAvatarURL)
      .setTimestamp()
      .setFooter("ÉclaryBOT", message.guild.iconURL);

    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(PermEmbed);
    let html = Buffer.from(
      "",
      "base64"
    ).toString("ascii");
    message.channel.fetchMessages().then(messages => {
      messages.forEach(msg => {
        let html =
          html +
          `<div class=chatlog__message id=message-${msg.id} data-message-id=${msg.id}>
                    <div class=chatlog__content><span class=markdown>${msg.content}</span></div>
                    <div class=chatlog__reactions>
                        <div class=chatlog__reactions></div>
                    </div>
                </div>`;

        html = html + "</div></body></html>";
        fs.appendFile(`/logs/${Date.now()}-logs.html`, html, function(err) {
          if (err) throw err;
        });
        console.log("succes");
      });
    });
  }
};
